{"version":3,"file":"BotBalance.vue_vue_type_script_setup_true_lang-BR5UZX-v.js","sources":["../../src/components/charts/BalanceChart.vue","../../src/components/ftbot/BotBalance.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport type { EChartsOption } from 'echarts';\nimport ECharts from 'vue-echarts';\n\nimport { PieChart } from 'echarts/charts';\nimport {\n  DatasetComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n} from 'echarts/components';\nimport { use } from 'echarts/core';\nimport { LabelLayout } from 'echarts/features';\nimport { CanvasRenderer } from 'echarts/renderers';\n\nimport { useSettingsStore } from '@/stores/settings';\nimport type { BalanceValues } from '@/types';\nimport { useElementSize } from '@vueuse/core';\n\nuse([\n  PieChart,\n  CanvasRenderer,\n  DatasetComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  LabelLayout,\n]);\n\nconst balanceChart = ref(null);\nconst { width } = useElementSize(balanceChart);\n\nconst props = defineProps({\n  currencies: { required: true, type: Array as () => BalanceValues[] },\n  showTitle: { required: false, type: Boolean },\n});\nconst settingsStore = useSettingsStore();\n\nconst balanceChartOptions = computed((): EChartsOption => {\n  return {\n    title: {\n      text: 'Balance',\n      show: props.showTitle,\n    },\n    center: ['50%', '50%'],\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    dataset: {\n      dimensions: ['balance', 'currency', 'est_stake', 'free', 'used', 'stake'],\n      source: props.currencies,\n    },\n    tooltip: {\n      trigger: 'item',\n      formatter: (params) => {\n        return `${formatPriceCurrency(params.value.balance, params.value.currency, 8)}<br />${\n          params.percent\n        }% (${formatPriceCurrency(params.value.est_stake, params.value.stake)})`;\n      },\n    },\n    // legend: {\n    //   orient: 'vertical',\n    //   right: 10,\n    //   top: 20,\n    //   bottom: 20,\n    // },\n    series: [\n      {\n        type: 'pie',\n        radius: ['40%', '70%'],\n\n        encode: {\n          value: 'est_stake',\n          itemName: 'currency',\n          tooltip: ['balance', 'currency'],\n        },\n        label: {\n          formatter: '{b} - {d}%',\n        },\n        tooltip: {\n          show: true,\n        },\n      },\n    ],\n  };\n});\n</script>\n\n<template>\n  <ECharts\n    v-if=\"currencies\"\n    ref=\"balanceChart\"\n    :option=\"balanceChartOptions\"\n    :theme=\"settingsStore.chartTheme\"\n    :style=\"{ height: width * 0.6 + 'px' }\"\n    autoresize\n  />\n</template>\n\n<style lang=\"scss\" scoped>\n.echarts {\n  min-height: 20px;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport type { BalanceValues } from '@/types';\nimport type { TableField } from 'bootstrap-vue-next';\n\nconst botStore = useBotStore();\nconst hideSmallBalances = ref(true);\nconst showBotOnly = ref(true);\n\nconst smallBalance = computed<number>(() => {\n  return Number((1.1 ** botStore.activeBot.stakeCurrencyDecimals).toFixed(8));\n});\n\nconst canUseBotBalance = computed(() => {\n  return botStore.activeBot.botApiVersion >= 2.26;\n});\n\nconst balanceCurrencies = computed(() => {\n  return botStore.activeBot.balance.currencies?.filter(\n    (v) =>\n      (!hideSmallBalances.value || v.est_stake >= smallBalance.value) &&\n      (!canUseBotBalance.value || !showBotOnly.value || (v.is_bot_managed ?? true) === true),\n  );\n});\n\nconst formatCurrency = (value) => {\n  return value ? formatPrice(value, botStore.activeBot.stakeCurrencyDecimals) : '';\n};\n\nconst chartValues = computed<BalanceValues[]>(() => {\n  return balanceCurrencies.value?.map((v) => {\n    return {\n      balance:\n        showBotOnly.value && canUseBotBalance.value && v.bot_owned != undefined\n          ? v.bot_owned\n          : v.is_position === true\n            ? v.position\n            : v.balance,\n      currency: v.currency,\n      est_stake:\n        showBotOnly.value && canUseBotBalance.value\n          ? (v.est_stake_bot ?? v.est_stake)\n          : v.est_stake,\n      free: showBotOnly.value && canUseBotBalance.value ? (v.bot_owned ?? v.free) : v.free,\n      used: v.used,\n      stake: v.stake,\n    };\n  });\n});\n\nconst tableFields = computed<TableField[]>(() => {\n  return [\n    { key: 'currency', label: 'Currency' },\n    {\n      key: showBotOnly.value && canUseBotBalance.value ? 'bot_owned' : 'free',\n      label: 'Available',\n      formatter: formatCurrency,\n    },\n    {\n      key: showBotOnly.value && canUseBotBalance.value ? 'est_stake_bot' : 'est_stake',\n      label: `in ${botStore.activeBot.balance.stake}`,\n      formatter: formatCurrency,\n    },\n  ];\n});\n\nasync function refreshBalance() {\n  botStore.activeBot.getBalance();\n}\n\nonMounted(() => {\n  refreshBalance();\n});\n</script>\n\n<template>\n  <div>\n    <div class=\"d-flex flex-wrap flex-row mb-2 justify-content-end align-items-center\">\n      <label class=\"h3 me-auto mb-0\">{{ showBotOnly ? 'Bot' : 'Account' }} Balance</label>\n      <div class=\"d-flex flex-row\">\n        <BButton\n          v-if=\"canUseBotBalance\"\n          size=\"sm\"\n          :title=\"!showBotOnly ? 'Showing Account balance' : 'Showing Bot balance'\"\n          @click=\"showBotOnly = !showBotOnly\"\n        >\n          <i-mdi-robot v-if=\"showBotOnly\" />\n          <i-mdi-bank v-else />\n        </BButton>\n        <BButton\n          size=\"sm\"\n          :title=\"!hideSmallBalances ? 'Hide small balances' : 'Show all balances'\"\n          @click=\"hideSmallBalances = !hideSmallBalances\"\n        >\n          <i-mdi-eye-off v-if=\"hideSmallBalances\" />\n          <i-mdi-eye v-else />\n        </BButton>\n\n        <BButton class=\"float-end\" size=\"sm\" @click=\"refreshBalance\">\n          <i-mdi-refresh />\n        </BButton>\n      </div>\n    </div>\n    <BalanceChart v-if=\"balanceCurrencies\" :currencies=\"chartValues\" />\n    <div>\n      <p v-if=\"botStore.activeBot.balance.note\">\n        <strong>{{ botStore.activeBot.balance.note }}</strong>\n      </p>\n      <BTable class=\"table-sm\" :items=\"balanceCurrencies\" :fields=\"tableFields\">\n        <template #custom-foot>\n          <td class=\"pt-1\"><strong>Total</strong></td>\n          <td class=\"pt-1\">\n            <span\n              class=\"font-italic\"\n              :title=\"`Increase over initial capital of ${formatCurrency(\n                botStore.activeBot.balance.starting_capital,\n              )} ${botStore.activeBot.balance.stake}`\"\n            >\n              {{ formatPercent(botStore.activeBot.balance.starting_capital_ratio) }}\n            </span>\n          </td>\n          <!-- this is a computed prop that adds up all the expenses in the visible rows -->\n          <td class=\"pt-1\">\n            <strong>\n              {{\n                showBotOnly && canUseBotBalance\n                  ? formatCurrency(botStore.activeBot.balance.total_bot)\n                  : formatCurrency(botStore.activeBot.balance.total)\n              }}\n            </strong>\n          </td>\n        </template>\n      </BTable>\n    </div>\n  </div>\n</template>\n"],"names":["use","PieChart","CanvasRenderer","DatasetComponent","LegendComponent","TitleComponent","TooltipComponent","LabelLayout","balanceChart","ref","width","useElementSize","props","__props","settingsStore","useSettingsStore","balanceChartOptions","computed","params","formatPriceCurrency","botStore","useBotStore","hideSmallBalances","showBotOnly","smallBalance","canUseBotBalance","balanceCurrencies","_a","v","formatCurrency","value","formatPrice","chartValues","tableFields","refreshBalance","onMounted"],"mappings":"weAmBIA,EAAA,CACFC,GACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAA,CACD,EAEK,MAAAC,EAAeC,EAAI,IAAI,EACvB,CAAE,MAAAC,CAAA,EAAUC,EAAeH,CAAY,EAEvCI,EAAQC,EAIRC,EAAgBC,EAAiB,EAEjCC,EAAsBC,EAAS,KAC5B,CACL,MAAO,CACL,KAAM,UACN,KAAML,EAAM,SACd,EACA,OAAQ,CAAC,MAAO,KAAK,EACrB,gBAAiB,mBACjB,QAAS,CACP,WAAY,CAAC,UAAW,WAAY,YAAa,OAAQ,OAAQ,OAAO,EACxE,OAAQA,EAAM,UAChB,EACA,QAAS,CACP,QAAS,OACT,UAAYM,GACH,GAAGC,EAAoBD,EAAO,MAAM,QAASA,EAAO,MAAM,SAAU,CAAC,CAAC,SAC3EA,EAAO,OACT,MAAMC,EAAoBD,EAAO,MAAM,UAAWA,EAAO,MAAM,KAAK,CAAC,GAEzE,EAOA,OAAQ,CACN,CACE,KAAM,MACN,OAAQ,CAAC,MAAO,KAAK,EAErB,OAAQ,CACN,MAAO,YACP,SAAU,WACV,QAAS,CAAC,UAAW,UAAU,CACjC,EACA,MAAO,CACL,UAAW,YACb,EACA,QAAS,CACP,KAAM,EAAA,CACR,CACF,CAEJ,EACD,imEC9ED,MAAME,EAAWC,EAAY,EACvBC,EAAoBb,EAAI,EAAI,EAC5Bc,EAAcd,EAAI,EAAI,EAEtBe,EAAeP,EAAiB,IAC7B,QAAQ,KAAOG,EAAS,UAAU,uBAAuB,QAAQ,CAAC,CAAC,CAC3E,EAEKK,EAAmBR,EAAS,IACzBG,EAAS,UAAU,eAAiB,IAC5C,EAEKM,EAAoBT,EAAS,IAAM,OAChC,OAAAU,EAAAP,EAAS,UAAU,QAAQ,aAA3B,YAAAO,EAAuC,OAC3CC,IACE,CAACN,EAAkB,OAASM,EAAE,WAAaJ,EAAa,SACxD,CAACC,EAAiB,OAAS,CAACF,EAAY,QAAUK,EAAE,gBAAkB,MAAU,IACrF,CACD,EAEKC,EAAkBC,GACfA,EAAQC,EAAYD,EAAOV,EAAS,UAAU,qBAAqB,EAAI,GAG1EY,EAAcf,EAA0B,IAAM,OAClD,OAAOU,EAAAD,EAAkB,QAAlB,YAAAC,EAAyB,IAAKC,IAC5B,CACL,QACEL,EAAY,OAASE,EAAiB,OAASG,EAAE,WAAa,KAC1DA,EAAE,UACFA,EAAE,cAAgB,GAChBA,EAAE,SACFA,EAAE,QACV,SAAUA,EAAE,SACZ,UACEL,EAAY,OAASE,EAAiB,MACjCG,EAAE,eAAiBA,EAAE,UACtBA,EAAE,UACR,KAAML,EAAY,OAASE,EAAiB,MAASG,EAAE,WAAaA,EAAE,KAAQA,EAAE,KAChF,KAAMA,EAAE,KACR,MAAOA,EAAE,KACX,GACD,CACF,EAEKK,EAAchB,EAAuB,IAClC,CACL,CAAE,IAAK,WAAY,MAAO,UAAW,EACrC,CACE,IAAKM,EAAY,OAASE,EAAiB,MAAQ,YAAc,OACjE,MAAO,YACP,UAAWI,CACb,EACA,CACE,IAAKN,EAAY,OAASE,EAAiB,MAAQ,gBAAkB,YACrE,MAAO,MAAML,EAAS,UAAU,QAAQ,KAAK,GAC7C,UAAWS,CAAA,CAEf,CACD,EAED,eAAeK,GAAiB,CAC9Bd,EAAS,UAAU,WAAW,CAAA,CAGhC,OAAAe,EAAU,IAAM,CACCD,EAAA,CAAA,CAChB"}