{"version":3,"file":"BacktestingView-B8Itz9ss.js","sources":["../../src/components/ftbot/TradeListNav.vue","../../src/components/ftbot/BacktestResultChart.vue","../../src/components/charts/MarketChangeChart.vue","../../src/components/ftbot/BacktestGraphs.vue","../../src/utils/backtestMetrics.ts","../../src/utils/objectToTableItems.ts","../../src/components/ftbot/BacktestResultComparison.vue","../../src/components/ftbot/BacktestResultPeriodBreakdown.vue","../../src/components/ftbot/BacktestResultTablePer.vue","../../src/components/ftbot/BacktestResultAnalysis.vue","../../src/components/ftbot/FreqaiModelSelect.vue","../../src/stores/btStore.ts","../../src/components/ftbot/BacktestRun.vue","../../src/components/ftbot/BacktestHistoryLoad.vue","../../src/components/ftbot/BacktestResultSelect.vue","../../src/views/BacktestingView.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport type { Trade } from '@/types';\n\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nconst props = defineProps({\n  trades: { required: true, type: Array as () => Trade[] },\n  backtestMode: { required: false, default: false, type: Boolean },\n});\nconst emit = defineEmits<{ 'trade-select': [trade: Trade] }>();\n\nconst botStore = useBotStore();\nconst selectedTrade = ref({} as Trade);\nconst sortDescendingOrder = ref(true);\nconst sortMethod = ref('openDate');\nconst sortMethodOptions = [\n  { text: 'Open date', value: 'openDate' },\n  { text: 'Profit %', value: 'profit' },\n];\n\nconst onTradeSelect = (trade: Trade) => {\n  selectedTrade.value = trade;\n  emit('trade-select', trade);\n};\n\nconst sortedTrades = computed(() => {\n  const field: keyof Trade = sortMethod.value === 'profit' ? 'profit_ratio' : 'open_timestamp';\n  return sortDescendingOrder.value\n    ? props.trades.slice().sort((a, b) => b[field] - a[field])\n    : props.trades.slice().sort((a, b) => a[field] - b[field]);\n});\n\nconst ordersVisible = ref(sortedTrades.value.map(() => false));\n\nwatch(\n  () => botStore.activeBot.selectedPair,\n  () => {\n    ordersVisible.value = sortedTrades.value.map(() => false);\n  },\n);\n</script>\n\n<template>\n  <div>\n    <div class=\"d-flex justify-content-center\">\n      <span class=\"me-2\">Sort by:</span>\n      <BFormRadioGroup v-model=\"sortMethod\" :options=\"sortMethodOptions\" name=\"radio-options\" />\n    </div>\n    <BListGroup>\n      <BListGroupItem\n        button\n        class=\"d-flex flex-wrap justify-content-center align-items-center\"\n        :title=\"'Trade Navigation'\"\n        @click=\"sortDescendingOrder = !sortDescendingOrder\"\n        >Trade Navigation {{ sortDescendingOrder ? '&#8595;' : '&#8593;' }}\n      </BListGroupItem>\n      <BListGroupItem\n        v-for=\"(trade, i) in sortedTrades\"\n        :key=\"trade.open_timestamp\"\n        button\n        class=\"d-flex flex-column py-1 pe-1 align-items-stretch\"\n        :title=\"`${trade.pair}`\"\n        :active=\"trade.open_timestamp === selectedTrade.open_timestamp\"\n        @click=\"onTradeSelect(trade)\"\n      >\n        <div class=\"d-flex\">\n          <div class=\"d-flex flex-column\">\n            <div>\n              <span v-if=\"botStore.activeBot.botState.trading_mode !== 'spot'\">{{\n                trade.is_short ? 'S-' : 'L-'\n              }}</span>\n              <DateTimeTZ :date=\"trade.open_timestamp\" />\n            </div>\n            <TradeProfit :trade=\"trade\" class=\"my-1\" />\n            <ProfitPill\n              v-if=\"backtestMode\"\n              :profit-ratio=\"trade.profit_ratio\"\n              :stake-currency=\"botStore.activeBot.stakeCurrency\"\n            />\n          </div>\n          <BButton\n            size=\"sm\"\n            class=\"ms-auto mt-auto\"\n            variant=\"outline-secondary\"\n            @click=\"ordersVisible[i] = !ordersVisible[i]\"\n            ><i-mdi-chevron-right v-if=\"!ordersVisible[i]\" width=\"24\" height=\"24\" />\n            <i-mdi-chevron-down v-if=\"ordersVisible[i]\" width=\"24\" height=\"24\" />\n          </BButton>\n        </div>\n        <BCollapse v-model=\"ordersVisible[i]\">\n          <ul class=\"px-3 m-0\">\n            <li\n              v-for=\"order in trade.orders?.filter((o) => o.order_filled_timestamp !== null)\"\n              :key=\"order.order_timestamp\"\n            >\n              {{ order.ft_order_side }} {{ order.amount }} at {{ order.safe_price }}\n            </li>\n          </ul>\n        </BCollapse>\n      </BListGroupItem>\n      <BListGroupItem v-if=\"trades.length === 0\">No trades to show...</BListGroupItem>\n    </BListGroup>\n  </div>\n</template>\n\n<style scoped>\n.list-group {\n  text-align: left;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nimport type { ChartSliderPosition, StrategyBacktestResult, Trade } from '@/types';\n\ndefineProps<{\n  timeframe: string;\n  strategy: string;\n  freqaiModel?: string;\n  timerange: string;\n  backtestResult: StrategyBacktestResult;\n}>();\nconst botStore = useBotStore();\nconst isBarVisible = ref({ right: true, left: true });\nconst sliderPosition = ref<ChartSliderPosition>();\n\nconst navigateChartToTrade = (trade: Trade) => {\n  sliderPosition.value = {\n    startValue: trade.open_timestamp,\n    endValue: trade.close_timestamp,\n  };\n};\n</script>\n\n<template>\n  <div>\n    <div class=\"d-flex flex-row mb-1 align-items-center\">\n      <div class=\"me-2\">\n        <BButton\n          aria-label=\"Close\"\n          title=\"Pair Navigation\"\n          variant=\"outline-secondary\"\n          size=\"sm\"\n          @click=\"isBarVisible.left = !isBarVisible.left\"\n        >\n          <i-mdi-chevron-right v-if=\"!isBarVisible.left\" width=\"24\" height=\"24\" />\n          <i-mdi-chevron-left v-if=\"isBarVisible.left\" width=\"24\" height=\"24\" />\n        </BButton>\n      </div>\n      <span class=\"flex-fill\">\n        Graph will always show the latest values for the selected strategy. <br />\n        Timerange: {{ timerange }} - {{ strategy }}\n      </span>\n      <div class=\"col-md-1 text-end\">\n        <BButton\n          aria-label=\"Close\"\n          variant=\"outline-secondary\"\n          title=\"Trade Navigation\"\n          size=\"sm\"\n          @click=\"isBarVisible.right = !isBarVisible.right\"\n        >\n          <i-mdi-chevron-right v-if=\"isBarVisible.right\" width=\"24\" height=\"24\" />\n          <i-mdi-chevron-left v-if=\"!isBarVisible.right\" width=\"24\" height=\"24\" />\n        </BButton>\n      </div>\n    </div>\n    <div class=\"text-center d-flex flex-row h-100 align-items-stretch\">\n      <Transition name=\"fadeleft\">\n        <PairSummary\n          v-if=\"isBarVisible.left\"\n          class=\"col-md-2 overflow-y-auto overflow-x-hidden\"\n          style=\"max-height: calc(100vh - 200px)\"\n          :pairlist=\"backtestResult.pairlist\"\n          :trades=\"backtestResult.trades\"\n          :starting-balance=\"backtestResult.starting_balance\"\n          sort-method=\"profit\"\n          :backtest-mode=\"true\"\n        />\n      </Transition>\n      <CandleChartContainer\n        :available-pairs=\"backtestResult.pairlist\"\n        :historic-view=\"!!true\"\n        :timeframe=\"timeframe\"\n        :timerange=\"timerange\"\n        :strategy=\"strategy\"\n        :trades=\"backtestResult.trades\"\n        class=\"flex-shrink-1 candle-chart-container w-100 px-0 h-100 align-self-stretch\"\n        :slider-position=\"sliderPosition\"\n        :freqai-model=\"freqaiModel\"\n      >\n      </CandleChartContainer>\n      <Transition name=\"fade\">\n        <TradeListNav\n          v-if=\"isBarVisible.right\"\n          class=\"overflow-y-auto col-md-2 overflow-x-visible\"\n          style=\"max-height: calc(100vh - 200px)\"\n          :trades=\"backtestResult.trades.filter((t) => t.pair === botStore.activeBot.selectedPair)\"\n          @trade-select=\"navigateChartToTrade\"\n        />\n      </Transition>\n    </div>\n    <BCard header=\"Single trades\" class=\"row mt-2 w-100\">\n      <TradeList\n        class=\"row trade-history mt-2 w-100\"\n        :trades=\"backtestResult.trades\"\n        :show-filter=\"true\"\n      />\n    </BCard>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.candle-chart-container {\n  // TODO: Rough estimate - still to fix correctly\n  // Applies to all \"calc\" usages in this file.\n  height: calc(100vh - 250px) !important;\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.2s;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n.fadeleft-enter-active,\n.fadeleft-leave-active {\n  transition: all 0.2s;\n}\n\n.fadeleft-enter-from,\n.fadeleft-leave-to {\n  opacity: 0;\n  transform: translateX(-30px);\n}\n</style>\n","<script setup lang=\"ts\">\nimport ECharts from 'vue-echarts';\n// import { EChartsOption } from 'echarts';\n\nimport { use } from 'echarts/core';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport { LineChart } from 'echarts/charts';\nimport {\n  DataZoomComponent,\n  DatasetComponent,\n  GridComponent,\n  LegendComponent,\n  CalendarComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n} from 'echarts/components';\n\nimport type { BacktestMarketChange } from '@/types';\nimport type { EChartsOption } from 'echarts';\n\nuse([\n  LineChart,\n  CalendarComponent,\n  CanvasRenderer,\n  GridComponent,\n  DatasetComponent,\n  DataZoomComponent,\n  LegendComponent,\n  TitleComponent,\n  TooltipComponent,\n  VisualMapComponent,\n]);\n\n// Define Column labels here to avoid typos\nconst CHART_MARKET_CHANGE = 'Market change %';\n\nconst props = defineProps({\n  marketChangeData: {\n    type: Object as () => BacktestMarketChange | null,\n    required: true,\n  },\n  showTitle: {\n    type: Boolean,\n    default: true,\n  },\n});\n\nconst settingsStore = useSettingsStore();\n\nconst marketChangeChart = ref(null);\n\nconst marketChangeOptions: ComputedRef<EChartsOption> = computed(() => {\n  if (!props.marketChangeData) {\n    return {};\n  }\n  const colDate = props.marketChangeData.columns.findIndex((el) => el === '__date_ts');\n  const colRelMean = props.marketChangeData.columns.findIndex((el) => el === 'rel_mean');\n  return {\n    title: {\n      text: 'Market change %',\n      left: 'center',\n      show: props.showTitle,\n    },\n    backgroundColor: 'rgba(0, 0, 0, 0)',\n    dataset: {\n      source: props.marketChangeData.data,\n    },\n    tooltip: {\n      trigger: 'axis',\n      axisPointer: {\n        type: 'line',\n        label: {\n          backgroundColor: '#6a7985',\n        },\n      },\n    },\n    grid: {\n      ...echartsGridDefault,\n    },\n    legend: {\n      data: [CHART_MARKET_CHANGE],\n      right: '5%',\n    },\n    xAxis: [\n      {\n        type: 'time',\n        axisLine: { onZero: false },\n        axisTick: { show: true },\n        axisLabel: { show: true },\n        axisPointer: {\n          label: { show: false },\n        },\n        // position: 'top',\n        splitLine: { show: false },\n        splitNumber: 20,\n        min: 'dataMin',\n        max: 'dataMax',\n      },\n    ],\n    yAxis: [\n      {\n        type: 'value',\n        name: CHART_MARKET_CHANGE,\n        splitLine: {\n          show: false,\n        },\n        nameRotate: 90,\n        nameLocation: 'middle',\n        nameGap: 35,\n      },\n    ],\n    dataZoom: [\n      {\n        type: 'inside',\n        start: 0,\n        end: 100,\n      },\n      {\n        bottom: 10,\n        start: 0,\n        end: 100,\n        ...dataZoomPartial,\n      },\n    ],\n    series: [\n      {\n        type: 'line',\n        name: CHART_MARKET_CHANGE,\n        showSymbol: false,\n        color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\n        encode: {\n          x: colDate,\n          // open, close, low, high\n          y: colRelMean,\n        },\n      },\n    ],\n  };\n});\n</script>\n\n<template>\n  <ECharts\n    v-if=\"marketChangeData?.data\"\n    ref=\"marketChangeChart\"\n    :option=\"marketChangeOptions\"\n    :theme=\"settingsStore.chartTheme\"\n    autoresize\n  />\n</template>\n\n<style lang=\"scss\" scoped>\n.echarts {\n  min-height: 240px;\n  height: 100%;\n}\n</style>\n","<script setup lang=\"ts\">\nimport type { ClosedTrade } from '@/types';\n\ndefineProps({\n  trades: { required: true, type: Array as () => ClosedTrade[] },\n});\n\nconst botStore = useBotStore();\n\nconst { state: marketChangeData } = useAsyncState(\n  () => botStore.activeBot.getBacktestMarketChange(),\n  null,\n);\n</script>\n<template>\n  <div class=\"text-center flex-fill d-flex flex-column h-100 gap-1\">\n    <TradesLogChart :trades=\"trades\" class=\"flex-grow-1 chart-equal-height\" />\n    <CumProfitChart :trades=\"trades\" class=\"flex-grow-1 chart-equal-height\" :show-title=\"true\" />\n    <MarketChangeChart\n      v-if=\"marketChangeData\"\n      :market-change-data=\"marketChangeData\"\n      class=\"flex-grow-1 chart-equal-height\"\n    />\n    <ProfitDistributionChart\n      class=\"flex-grow-1 chart-equal-height\"\n      :trades=\"trades\"\n      :show-title=\"true\"\n    />\n  </div>\n</template>\n<style scoped lang=\"scss\">\n.chart-equal-height {\n  min-height: 300px !important;\n}\n</style>\n","import type { StrategyBacktestResult, Trade } from '@/types';\n\nfunction getSortedTrades(trades: Trade[]): Trade[] {\n  const sortedTrades = trades.slice().sort((a, b) => a.profit_ratio - b.profit_ratio);\n  return sortedTrades;\n}\n\nfunction getBestPair(trades: Trade[]) {\n  if (trades.length === 0) {\n    return 'N/A';\n  }\n  const value = trades[trades.length - 1];\n  return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\n}\n\nfunction getWorstPair(trades: Trade[]) {\n  if (trades.length === 0) {\n    return 'N/A';\n  }\n  const value = trades[0];\n  return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\n}\n\nfunction useFormatPriceStake(stake_currency_decimals: number, stake_currency: string) {\n  const formatPriceStake = (price) => {\n    return `${formatPrice(price, stake_currency_decimals)} ${stake_currency}`;\n  };\n  return formatPriceStake;\n}\n\nexport function generateBacktestMetricRows(result: StrategyBacktestResult) {\n  const sortedTrades = getSortedTrades(result.trades);\n  const bestPair = getBestPair(sortedTrades);\n  const worstPair = getWorstPair(sortedTrades);\n  const pairSummary = result.results_per_pair[result.results_per_pair.length - 1];\n\n  const formatPriceStake = useFormatPriceStake(\n    result.stake_currency_decimals,\n    result.stake_currency,\n  );\n\n  // Transpose Result into readable format\n  const shortMetrics =\n    result.trade_count_short && result.trade_count_short > 0\n      ? [\n          { '___ ': '___' },\n          {\n            'Long / Short': `${result.trade_count_long} / ${result.trade_count_short}`,\n          },\n          {\n            'Total profit Long': `${formatPercent(\n              result.profit_total_long || 0,\n            )} | ${formatPriceStake(result.profit_total_long_abs)}`,\n          },\n          {\n            'Total profit Short': `${formatPercent(\n              result.profit_total_short || 0,\n            )} | ${formatPriceStake(result.profit_total_short_abs)}`,\n          },\n        ]\n      : [];\n\n  const tmp = [\n    {\n      'Total Profit': `${formatPercent(result.profit_total)} | ${formatPriceStake(\n        result.profit_total_abs,\n      )}`,\n    },\n    {\n      CAGR: `${result.cagr ? formatPercent(result.cagr) : 'N/A'}`,\n    },\n    {\n      Sortino: `${result.sortino ? result.sortino.toFixed(2) : 'N/A'}`,\n    },\n    {\n      Sharpe: `${result.sharpe ? result.sharpe.toFixed(2) : 'N/A'}`,\n    },\n    {\n      Calmar: `${result.calmar ? result.calmar.toFixed(2) : 'N/A'}`,\n    },\n    {\n      [`Expectancy ${result.expectancy_ratio ? '(ratio)' : ''}`]: `${\n        result.expectancy\n          ? result.expectancy_ratio\n            ? result.expectancy.toFixed(2) + ' (' + result.expectancy_ratio.toFixed(2) + ')'\n            : result.expectancy.toFixed(2)\n          : 'N/A'\n      }`,\n    },\n    {\n      'Profit factor': `${result.profit_factor ? formatPrice(result.profit_factor, 3) : 'N/A'}`,\n    },\n    {\n      'Total trades / Daily Avg Trades': `${result.total_trades} / ${result.trades_per_day}`,\n    },\n    // { 'First trade': result.backtest_fi },\n    // { 'First trade Pair': result.backtest_best_day },\n    {\n      'Best day': `${formatPercent(result.backtest_best_day, 2)} | ${formatPriceStake(\n        result.backtest_best_day_abs,\n      )}`,\n    },\n    {\n      'Worst day': `${formatPercent(result.backtest_worst_day, 2)} | ${formatPriceStake(\n        result.backtest_worst_day_abs,\n      )}`,\n    },\n\n    {\n      'Win/Draw/Loss': `${pairSummary.wins} / ${pairSummary.draws} / ${pairSummary.losses} ${\n        isNotUndefined(pairSummary.winrate)\n          ? '(WR: ' +\n            formatPercent(\n              result.results_per_pair[result.results_per_pair.length - 1].winrate ?? 0,\n              2,\n            ) +\n            ')'\n          : ''\n      }`,\n    },\n    {\n      'Days win/draw/loss': `${result.winning_days} / ${result.draw_days} / ${result.losing_days}`,\n    },\n    {\n      'Avg. Duration winners': humanizeDurationFromSeconds(result.winner_holding_avg_s),\n    },\n    {\n      'Avg. Duration Losers': humanizeDurationFromSeconds(result.loser_holding_avg_s),\n    },\n    {\n      'Max Consecutive Wins / Loss':\n        result.max_consecutive_wins === undefined\n          ? 'N/A'\n          : `${result.max_consecutive_wins} / ${result.max_consecutive_losses}`,\n    },\n    { 'Rejected entry signals': result.rejected_signals },\n    {\n      'Entry/Exit timeouts': `${result.timedout_entry_orders} / ${result.timedout_exit_orders}`,\n    },\n    {\n      'Canceled Trade Entries': result.canceled_trade_entries ?? 'N/A',\n    },\n    {\n      'Canceled Entry Orders': result.canceled_entry_orders ?? 'N/A',\n    },\n    {\n      'Replaced Entry Orders': result.replaced_entry_orders ?? 'N/A',\n    },\n\n    ...shortMetrics,\n\n    { ___: '___' },\n    { 'Min balance': formatPriceStake(result.csum_min) },\n    { 'Max balance': formatPriceStake(result.csum_max) },\n    { 'Market change': formatPercent(result.market_change) },\n    { '___  ': '___' },\n    {\n      'Max Drawdown (Account)': formatPercent(result.max_drawdown_account),\n    },\n    {\n      'Max Drawdown ABS': formatPriceStake(result.max_drawdown_abs),\n    },\n    {\n      'Drawdown high | low': `${formatPriceStake(result.max_drawdown_high)} | ${formatPriceStake(\n        result.max_drawdown_low,\n      )}`,\n    },\n    { 'Drawdown start': timestampms(result.drawdown_start_ts) },\n    { 'Drawdown end': timestampms(result.drawdown_end_ts) },\n    { '___   ': '___' },\n\n    {\n      'Best Pair': `${result.best_pair.key} ${formatPercent(result.best_pair.profit_total)}`,\n    },\n    {\n      'Worst Pair': `${result.worst_pair.key} ${formatPercent(result.worst_pair.profit_total)}`,\n    },\n    { 'Best single Trade': bestPair },\n    { 'Worst single Trade': worstPair },\n  ];\n  return tmp;\n}\n\nfunction capitalizeFirstLetter(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction formatTradingMode(result: StrategyBacktestResult) {\n  if (!result.trading_mode || !result.margin_mode) {\n    return {};\n  }\n  const value =\n    result.trading_mode === 'spot'\n      ? capitalizeFirstLetter(result.trading_mode)\n      : `${capitalizeFirstLetter(result.margin_mode)} ${capitalizeFirstLetter(result.trading_mode)}`;\n  return { 'Trading Mode': value };\n}\n\nexport function generateBacktestSettingRows(result: StrategyBacktestResult) {\n  const formatPriceStake = useFormatPriceStake(\n    result.stake_currency_decimals,\n    result.stake_currency,\n  );\n  const tradingMode = formatTradingMode(result);\n\n  return [\n    { 'Backtesting from': timestampms(result.backtest_start_ts) },\n    { 'Backtesting to': timestampms(result.backtest_end_ts) },\n    ...(Object.keys(tradingMode).length !== 0 ? [tradingMode] : []),\n    {\n      'BT execution time': humanizeDurationFromSeconds(\n        result.backtest_run_end_ts - result.backtest_run_start_ts,\n      ),\n    },\n    { 'Max open trades': result.max_open_trades },\n    { Timeframe: result.timeframe },\n    { 'Timeframe Detail': result.timeframe_detail || 'N/A' },\n    { Timerange: result.timerange },\n    { Stoploss: formatPercent(result.stoploss, 2) },\n    { 'Trailing Stoploss': result.trailing_stop },\n    {\n      'Trail only when offset is reached': result.trailing_only_offset_is_reached,\n    },\n    { 'Trailing Stop positive': result.trailing_stop_positive },\n    {\n      'Trailing stop positive offset': result.trailing_stop_positive_offset,\n    },\n    { 'Custom Stoploss': result.use_custom_stoploss },\n    { ROI: JSON.stringify(result.minimal_roi) },\n    {\n      'Use Exit Signal':\n        result.use_exit_signal !== undefined ? result.use_exit_signal : result.use_sell_signal,\n    },\n    {\n      'Exit profit only':\n        result.exit_profit_only !== undefined ? result.exit_profit_only : result.sell_profit_only,\n    },\n    {\n      'Exit profit offset':\n        result.exit_profit_offset !== undefined\n          ? result.exit_profit_offset\n          : result.sell_profit_offset,\n    },\n    { 'Enable protections': result.enable_protections },\n    {\n      'Starting balance': formatPriceStake(result.starting_balance),\n    },\n    {\n      'Final balance': formatPriceStake(result.final_balance),\n    },\n    {\n      'Avg. stake amount': formatPriceStake(result.avg_stake_amount),\n    },\n    {\n      'Total trade volume': formatPriceStake(result.total_volume),\n    },\n  ];\n}\n","interface childObjects {\n  [key: string]: string | boolean | number | undefined;\n}\ninterface MutatingObject {\n  [key: string]: childObjects[];\n}\n\n/**\n *\n * @param originalobj Object in the form {Name, [{metric: value}]]}\n * @param valueKey Key to use for result\n * @returns Object in the form [{valueKey: metric, Name: value}]\n */\nexport function formatObjectForTable(originalobj: MutatingObject, valueKey: string) {\n  const result = Object.entries(originalobj).reduce((acc: childObjects[], [key, value]) => {\n    value.forEach((item) => {\n      const [metric, val] = Object.entries(item)[0];\n      const existingItem = acc.find((i) => i[valueKey] === metric);\n      if (existingItem) {\n        existingItem[key] = val;\n      } else {\n        acc.push({\n          [valueKey]: metric,\n          [key]: val,\n        });\n      }\n    });\n    return acc;\n  }, []);\n  return result;\n}\n","<script setup lang=\"ts\">\nimport type { BacktestResultInMemory } from '@/types';\n\nimport type { TableField } from 'bootstrap-vue-next';\n\nconst props = defineProps({\n  backtestResults: { required: true, type: Object as () => Record<string, BacktestResultInMemory> },\n});\n\nconst backtestResultStats = computed(() => {\n  const values = {};\n  Object.entries(props.backtestResults).forEach(([key, result]) => {\n    const tmp = generateBacktestMetricRows(result.strategy);\n    values[key] = tmp;\n  });\n  console.log(values);\n  // return '';\n  return formatObjectForTable(values, 'metric');\n});\n\nconst backtestResultFields = computed<TableField[]>(() => {\n  const res = [{ key: 'metric', label: 'Metric' }];\n  Object.entries(props.backtestResults).forEach(([key, value]) => {\n    res.push({ key, label: value.metadata.strategyName });\n  });\n  return res;\n});\n</script>\n\n<template>\n  <div class=\"px-0 mw-100\">\n    <div class=\"d-flex justify-content-center\">\n      <h3>Backtest-result comparison</h3>\n    </div>\n\n    <!-- <div class=\"d-flex\">\n      <div v-for=\"[key, result] in Object.entries(backtestResults)\" :key=\"key\" class=\"border m-1\">\n        <BacktestResultSelectEntry :backtest-result=\"result\" />\n      </div>\n    </div> -->\n    <div class=\"d-flex flex-column text-start ms-0 me-2 gap-2\">\n      <div class=\"d-flex flex-column flex-xl-row\">\n        <div class=\"px-0 px-xl-0 pt-2 pt-xl-0 ps-xl-1 flex-fill\">\n          <BTable bordered :items=\"backtestResultStats\" :fields=\"backtestResultFields\">\n            <template\n              v-for=\"[key, result] in Object.entries(backtestResults)\"\n              #[`head(${key})`]\n              :key=\"key\"\n            >\n              <BacktestResultSelectEntry :backtest-result=\"result\" />\n            </template>\n          </BTable>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped></style>\n","<script setup lang=\"ts\">\nimport type { PeriodicBreakdown } from '@/types';\nimport type { TableField, TableItem } from 'bootstrap-vue-next';\n\ndefineProps({\n  periodicBreakdown: {\n    type: Object as () => PeriodicBreakdown,\n    required: true,\n  },\n});\nconst periodicBreakdownSelections = [\n  { value: 'day', text: 'Days' },\n  { value: 'week', text: 'Weeks' },\n  { value: 'month', text: 'Months' },\n];\n\nconst periodicBreakdownPeriod = ref<string>('month');\n\nconst periodicBreakdownFields = computed<TableField[]>(() => {\n  return [\n    { key: 'date', label: 'Date' },\n    { key: 'wins', label: 'Wins' },\n    { key: 'draws', label: 'Draws' },\n    { key: 'loses', label: 'Losses' },\n  ];\n});\n</script>\n\n<template>\n  <BFormRadioGroup\n    id=\"order-direction\"\n    v-model=\"periodicBreakdownPeriod\"\n    :options=\"periodicBreakdownSelections\"\n    name=\"radios-btn-default\"\n    size=\"sm\"\n    buttons\n    style=\"min-width: 10em\"\n    button-variant=\"outline-primary\"\n  ></BFormRadioGroup>\n  <BTable\n    small\n    hover\n    stacked=\"sm\"\n    :items=\"periodicBreakdown[periodicBreakdownPeriod] as unknown as TableItem[]\"\n    :fields=\"periodicBreakdownFields\"\n  >\n  </BTable>\n</template>\n","<script setup lang=\"ts\">\nimport type { ExitReasonResults, PairResult } from '@/types';\nimport type { TableItem } from 'bootstrap-vue-next';\n\nconst props = defineProps({\n  title: { type: String, required: true },\n  results: { type: Array as PropType<(PairResult | ExitReasonResults)[]>, required: true },\n  stakeCurrency: { type: String, required: true },\n  stakeCurrencyDecimals: { type: Number, required: true },\n  keyHeader: { type: String, default: '' },\n  keyHeaders: { type: Array as PropType<string[]>, default: () => [] },\n});\n\nconst tableItems = computed(\n  () =>\n    props.results.map((v) => {\n      if (props.keyHeaders.length > 0) {\n        return {\n          ...v,\n          key:\n            typeof v['key'] === 'string' ? Array(props.keyHeaders.length).fill(v['key']) : v['key'],\n        };\n      }\n      return v;\n    }) as unknown as TableItem[],\n);\n\nconst perTagReason = computed(() => {\n  // TODO: should be TableField - but it's not working correctly\n  const firstFields: any[] = [];\n  if (props.keyHeaders.length > 0) {\n    // Keys could be an array\n    for (let i = 0; i < props.keyHeaders.length; i += 1) {\n      firstFields.push({\n        key: `key[${i}]`,\n        label: props.keyHeaders[i],\n        formatter: (value, _, item) =>\n          Array.isArray(value) ? value[i] : value || item['exit_reason'] || 'OTHER',\n      });\n    }\n  } else {\n    firstFields.push({\n      key: 'key',\n      label: props.keyHeader,\n      formatter: (value, _, item) => (value || item['exit_reason'] || 'OTHER') as string,\n    });\n  }\n\n  return [\n    ...firstFields,\n    { key: 'trades', label: 'Trades' },\n    {\n      key: 'profit_mean',\n      label: 'Avg Profit %',\n      formatter: (value: number) => formatPercent(value, 2),\n    },\n    {\n      key: 'profit_total_abs',\n      label: `Tot Profit ${props.stakeCurrency}`,\n\n      formatter: (value) => formatPrice(value as number, props.stakeCurrencyDecimals),\n    },\n    {\n      key: 'profit_total',\n      label: 'Tot Profit %',\n      formatter: (value) => formatPercent(value as number, 2),\n    },\n    { key: 'wins', label: 'Wins' },\n    { key: 'draws', label: 'Draws' },\n    { key: 'losses', label: 'Losses' },\n  ];\n});\nconsole.log(props.title, 'xxx', perTagReason);\n</script>\n<template>\n  <BCard :header=\"title\">\n    <BTable small hover stacked=\"sm\" :items=\"tableItems\" :fields=\"perTagReason\"> </BTable>\n  </BCard>\n</template>\n","<script setup lang=\"ts\">\nimport type { StrategyBacktestResult } from '@/types';\n\nimport type { TableField } from 'bootstrap-vue-next';\n\nconst props = defineProps({\n  backtestResult: { required: true, type: Object as () => StrategyBacktestResult },\n});\n\nconst backtestResultStats = computed(() => {\n  const tmp = generateBacktestMetricRows(props.backtestResult);\n  return formatObjectForTable({ value: tmp }, 'metric');\n});\n\nconst backtestResultSettings = computed(() => {\n  // Transpose Result into readable format\n  const tmp = generateBacktestSettingRows(props.backtestResult);\n\n  return formatObjectForTable({ value: tmp }, 'setting');\n});\nconst backtestResultFields: TableField[] = [\n  { key: 'metric', label: 'Metric' },\n  { key: 'value', label: 'Value' },\n];\n\nconst backtestsettingFields: TableField[] = [\n  { key: 'setting', label: 'Setting' },\n  { key: 'value', label: 'Value' },\n];\n</script>\n\n<template>\n  <div class=\"px-0 mw-100\">\n    <div class=\"d-flex justify-content-center\">\n      <h3>Backtest-result for {{ backtestResult.strategy_name }}</h3>\n    </div>\n\n    <div class=\"d-flex flex-column text-start ms-0 me-2 gap-2\">\n      <div class=\"d-flex flex-column flex-xl-row\">\n        <div class=\"px-0 px-xl-0 pe-xl-1 flex-fill\">\n          <BCard header=\"Strategy settings\">\n            <BTable\n              small\n              borderless\n              :items=\"backtestResultSettings\"\n              :fields=\"backtestsettingFields\"\n            >\n            </BTable>\n          </BCard>\n        </div>\n        <div class=\"px-0 px-xl-0 pt-2 pt-xl-0 ps-xl-1 flex-fill\">\n          <BCard header=\"Metrics\">\n            <BTable small borderless :items=\"backtestResultStats\" :fields=\"backtestResultFields\">\n            </BTable>\n          </BCard>\n        </div>\n      </div>\n      <BacktestResultTablePer\n        title=\"Results per Enter tag\"\n        :results=\"backtestResult.results_per_enter_tag\"\n        :stake-currency=\"backtestResult.stake_currency\"\n        key-header=\"Enter Tag\"\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\n      />\n\n      <BacktestResultTablePer\n        title=\"Results per Exit reason\"\n        :results=\"backtestResult.exit_reason_summary ?? []\"\n        :stake-currency=\"backtestResult.stake_currency\"\n        key-header=\"Exit Reason\"\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\n      />\n\n      <BacktestResultTablePer\n        v-if=\"backtestResult.mix_tag_stats\"\n        title=\"Results Mixed Tag\"\n        :results=\"backtestResult.mix_tag_stats ?? []\"\n        :stake-currency=\"backtestResult.stake_currency\"\n        :key-headers=\"['Enter Tag', 'Exit Tag']\"\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\n      />\n\n      <BacktestResultTablePer\n        title=\"Results per pair\"\n        :results=\"backtestResult.results_per_pair\"\n        :stake-currency=\"backtestResult.stake_currency\"\n        key-header=\"Pair\"\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\n      />\n      <BCard v-if=\"backtestResult.periodic_breakdown\" header=\"Periodic breakdown\">\n        <BacktestResultPeriodBreakdown :periodic-breakdown=\"backtestResult.periodic_breakdown\">\n        </BacktestResultPeriodBreakdown>\n      </BCard>\n\n      <BCard header=\"Single trades\">\n        <TradeList\n          :trades=\"backtestResult.trades\"\n          :show-filter=\"true\"\n          :stake-currency=\"backtestResult.stake_currency\"\n        />\n      </BCard>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped></style>\n","<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nconst locFreqaiModel = defineModel<string>();\nconst botStore = useBotStore();\n\nonMounted(() => {\n  if (botStore.activeBot.freqaiModelList.length === 0) {\n    botStore.activeBot.getFreqAIModelList();\n  }\n});\n</script>\n\n<template>\n  <div>\n    <div class=\"w-100 d-flex\">\n      <BFormSelect\n        id=\"freqaiModel-select\"\n        v-model=\"locFreqaiModel\"\n        :options=\"botStore.activeBot.freqaiModelList\"\n      >\n      </BFormSelect>\n      <div class=\"ms-2\">\n        <BButton @click=\"botStore.activeBot.getFreqAIModelList\">\n          <i-mdi-refresh />\n        </BButton>\n      </div>\n    </div>\n  </div>\n</template>\n","export const useBtStore = defineStore('btStore', {\n  state: () => {\n    return {\n      strategy: '',\n      selectedTimeframe: '',\n      selectedDetailTimeframe: '',\n      timerange: '',\n      maxOpenTrades: '',\n      stakeAmount: '',\n      startingCapital: '',\n      allowCache: true,\n      enableProtections: false,\n      stakeAmountUnlimited: false,\n      freqAI: {\n        enabled: false,\n        model: '',\n        identifier: '',\n      },\n    };\n  },\n  getters: {\n    canRunBacktest: (state) => state.strategy !== '',\n  },\n  actions: {},\n});\n\nif (import.meta.hot) {\n  import.meta.hot.accept(acceptHMRUpdate(useBtStore, import.meta.hot));\n}\n","<script setup lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport type { BacktestPayload } from '@/types';\n\nimport { useBtStore } from '@/stores/btStore';\nconst botStore = useBotStore();\nconst btStore = useBtStore();\n\nfunction clickBacktest() {\n  const btPayload: BacktestPayload = {\n    strategy: btStore.strategy,\n    timerange: btStore.timerange,\n    enable_protections: btStore.enableProtections,\n  };\n  const openTradesInt = parseInt(btStore.maxOpenTrades, 10);\n  if (openTradesInt) {\n    btPayload.max_open_trades = openTradesInt;\n  }\n  if (btStore.stakeAmountUnlimited) {\n    btPayload.stake_amount = 'unlimited';\n  } else {\n    const stakeAmountLoc = Number(btStore.stakeAmount);\n    if (stakeAmountLoc) {\n      btPayload.stake_amount = stakeAmountLoc.toString();\n    }\n  }\n\n  const startingCapitalLoc = Number(btStore.startingCapital);\n  if (startingCapitalLoc) {\n    btPayload.dry_run_wallet = startingCapitalLoc;\n  }\n\n  if (btStore.selectedTimeframe) {\n    btPayload.timeframe = btStore.selectedTimeframe;\n  }\n  if (btStore.selectedDetailTimeframe) {\n    btPayload.timeframe_detail = btStore.selectedDetailTimeframe;\n  }\n  if (!btStore.allowCache) {\n    btPayload.backtest_cache = 'none';\n  }\n  if (btStore.freqAI.enabled) {\n    btPayload.freqaimodel = btStore.freqAI.model;\n    if (btStore.freqAI.identifier !== '') {\n      btPayload.freqai = { identifier: btStore.freqAI.identifier };\n    }\n  }\n\n  botStore.activeBot.startBacktest(btPayload);\n}\n</script>\n\n<template>\n  <div class=\"mb-2\">\n    <span>Strategy</span>\n    <StrategySelect v-model=\"btStore.strategy\"></StrategySelect>\n  </div>\n  <BCard :disabled=\"botStore.activeBot.backtestRunning\">\n    <!-- Backtesting parameters -->\n    <BFormGroup\n      label-cols-lg=\"2\"\n      label=\"Backtest params\"\n      label-size=\"sm\"\n      label-class=\"fw-bold pt-0\"\n      class=\"mb-0\"\n    >\n      <BFormGroup\n        label-cols-sm=\"5\"\n        label=\"Timeframe:\"\n        label-align-sm=\"right\"\n        label-for=\"timeframe-select\"\n      >\n        <TimeframeSelect id=\"timeframe-select\" v-model=\"btStore.selectedTimeframe\" />\n      </BFormGroup>\n      <BFormGroup\n        label-cols-sm=\"5\"\n        label=\"Detail Timeframe:\"\n        label-align-sm=\"right\"\n        label-for=\"timeframe-detail-select\"\n        title=\"Detail timeframe, to simulate intra-candle results. Not setting this will not use this functionality.\"\n      >\n        <TimeframeSelect\n          id=\"timeframe-detail-select\"\n          v-model=\"btStore.selectedDetailTimeframe\"\n          :below-timeframe=\"btStore.selectedTimeframe\"\n        />\n      </BFormGroup>\n\n      <BFormGroup\n        label-cols-sm=\"5\"\n        label=\"Max open trades:\"\n        label-align-sm=\"right\"\n        label-for=\"max-open-trades\"\n      >\n        <BFormInput\n          id=\"max-open-trades\"\n          v-model=\"btStore.maxOpenTrades\"\n          placeholder=\"Use strategy default\"\n          type=\"number\"\n        ></BFormInput>\n      </BFormGroup>\n      <BFormGroup\n        label-cols-sm=\"5\"\n        label=\"Starting capital:\"\n        label-align-sm=\"right\"\n        label-for=\"starting-capital\"\n      >\n        <BFormInput\n          id=\"starting-capital\"\n          v-model=\"btStore.startingCapital\"\n          placeholder=\"Use config default\"\n          type=\"number\"\n          step=\"0.001\"\n        ></BFormInput>\n      </BFormGroup>\n      <BFormGroup\n        label-cols-sm=\"5\"\n        label=\"Stake amount:\"\n        label-align-sm=\"right\"\n        label-for=\"stake-amount\"\n      >\n        <div class=\"d-flex align-items-center\">\n          <div style=\"flex-basis: 100%\" class=\"d-flex\">\n            <BFormCheckbox id=\"stake-amount-bool\" v-model=\"btStore.stakeAmountUnlimited\"\n              >Unlimited stake</BFormCheckbox\n            >\n          </div>\n          <BFormInput\n            id=\"stake-amount\"\n            v-model=\"btStore.stakeAmount\"\n            type=\"number\"\n            placeholder=\"Use strategy default\"\n            step=\"0.01\"\n            style=\"flex-basis: 100%\"\n            :disabled=\"btStore.stakeAmountUnlimited\"\n          ></BFormInput>\n        </div>\n      </BFormGroup>\n\n      <BFormGroup\n        label-cols-sm=\"5\"\n        label=\"Enable Protections:\"\n        label-align-sm=\"right\"\n        label-for=\"enable-protections\"\n        class=\"align-items-center\"\n      >\n        <BFormCheckbox id=\"enable-protections\" v-model=\"btStore.enableProtections\"></BFormCheckbox>\n      </BFormGroup>\n      <BFormGroup\n        v-if=\"botStore.activeBot.botApiVersion >= 2.22\"\n        label-cols-sm=\"5\"\n        label=\"Cache Backtest results:\"\n        label-align-sm=\"right\"\n        label-for=\"enable-cache\"\n        class=\"align-items-center\"\n      >\n        <BFormCheckbox id=\"enable-cache\" v-model=\"btStore.allowCache\"></BFormCheckbox>\n      </BFormGroup>\n      <template v-if=\"botStore.activeBot.botApiVersion >= 2.22\">\n        <BFormGroup\n          label-cols-sm=\"5\"\n          label=\"Enable FreqAI:\"\n          label-align-sm=\"right\"\n          label-for=\"enable-freqai\"\n          class=\"align-items-center\"\n        >\n          <template #label>\n            <div class=\"d-flex justify-content-center\">\n              <span class=\"me-2\">Enable FreqAI:</span>\n              <InfoBox\n                hint=\"Assumes freqAI configuration is setup in the configuration, and the strategy is a freqAI strategy. Will fail if that's not the case.\"\n              />\n            </div>\n          </template>\n          <BFormCheckbox id=\"enable-freqai\" v-model=\"btStore.freqAI.enabled\"></BFormCheckbox>\n        </BFormGroup>\n        <BFormGroup\n          v-if=\"btStore.freqAI.enabled\"\n          label-cols-sm=\"5\"\n          label=\"FreqAI identifier:\"\n          label-align-sm=\"right\"\n          label-for=\"freqai-identifier\"\n        >\n          <BFormInput\n            id=\"freqai-identifier\"\n            v-model=\"btStore.freqAI.identifier\"\n            placeholder=\"Use config default\"\n          ></BFormInput>\n        </BFormGroup>\n        <BFormGroup\n          v-if=\"btStore.freqAI.enabled\"\n          label-cols-sm=\"5\"\n          label=\"FreqAI Model\"\n          label-align-sm=\"right\"\n          label-for=\"freqai-model\"\n        >\n          <FreqaiModelSelect id=\"freqai-model\" v-model=\"btStore.freqAI.model\"></FreqaiModelSelect>\n        </BFormGroup>\n      </template>\n\n      <!-- <b-form-group label-cols-sm=\"5\" label=\"Fee:\" label-align-sm=\"right\" label-for=\"fee\">\n              <b-form-input\n                id=\"fee\"\n                type=\"number\"\n                placeholder=\"Use exchange default\"\n                step=\"0.01\"\n              ></b-form-input>\n            </b-form-group> -->\n      <hr />\n      <TimeRangeSelect v-model=\"btStore.timerange\" class=\"mt-2\"></TimeRangeSelect>\n    </BFormGroup>\n  </BCard>\n\n  <h3 class=\"mt-3\">Backtesting summary</h3>\n  <div class=\"d-flex flex-wrap flex-md-nowrap justify-content-between justify-content-md-center\">\n    <BButton\n      id=\"start-backtest\"\n      variant=\"primary\"\n      :disabled=\"\n        !btStore.canRunBacktest ||\n        botStore.activeBot.backtestRunning ||\n        !botStore.activeBot.canRunBacktest\n      \"\n      class=\"mx-1\"\n      @click=\"clickBacktest\"\n    >\n      Start backtest\n    </BButton>\n    <BButton\n      variant=\"secondary\"\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n      class=\"mx-1\"\n      @click=\"botStore.activeBot.pollBacktest\"\n    >\n      Load backtest result\n    </BButton>\n    <BButton\n      variant=\"secondary\"\n      class=\"mx-1\"\n      :disabled=\"!botStore.activeBot.backtestRunning\"\n      @click=\"botStore.activeBot.stopBacktest\"\n      >Stop Backtest</BButton\n    >\n    <BButton\n      variant=\"secondary\"\n      class=\"mx-1\"\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n      @click=\"botStore.activeBot.removeBacktest\"\n      >Reset Backtest</BButton\n    >\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport type { MsgBoxObject } from '@/components/general/MessageBox.vue';\nimport MessageBox from '@/components/general/MessageBox.vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport type { BacktestHistoryEntry } from '@/types';\nimport InfoBox from '../general/InfoBox.vue';\n\nconst botStore = useBotStore();\nconst msgBox = ref<typeof MessageBox>();\nconst filterText = ref('');\nconst filterTextDebounced = refDebounced(filterText, 350, { maxWait: 1000 });\n\nonMounted(() => {\n  botStore.activeBot.getBacktestHistory();\n});\n\nfunction deleteBacktestResult(result: BacktestHistoryEntry) {\n  const msg: MsgBoxObject = {\n    title: 'Delete result',\n    message: `Delete result ${result.filename} from disk?`,\n    accept: () => {\n      botStore.activeBot.deleteBacktestHistoryResult(result);\n    },\n  };\n  msgBox.value?.show(msg);\n}\n</script>\n\n<template>\n  <div>\n    <button\n      class=\"btn btn-secondary float-end\"\n      title=\"Refresh\"\n      aria-label=\"Refresh\"\n      @click=\"botStore.activeBot.getBacktestHistory\"\n    >\n      <i-mdi-refresh />\n    </button>\n    <p>\n      Load Historic results from disk. You can click on multiple results to load all of them into\n      freqUI.\n    </p>\n    <div class=\"d-flex align-items-center\">\n      <BFormGroup\n        v-if=\"botStore.activeBot.backtestHistoryList.length > 0\"\n        class=\"my-2\"\n        label-for=\"trade-filter\"\n      >\n        <BFormInput\n          id=\"trade-filter\"\n          v-model=\"filterText\"\n          type=\"text\"\n          placeholder=\"Filter Strategies\"\n          tilte=\"Filter Strategies\"\n        />\n      </BFormGroup>\n    </div>\n    <BTableSimple\n      v-if=\"botStore.activeBot.backtestHistoryList.length > 0\"\n      responsive\n      small\n      class=\"rounded-1 table-rounded-corners\"\n    >\n      <BThead>\n        <BTr>\n          <BTh>Strategy</BTh>\n          <BTh>Details</BTh>\n          <BTh>Backtest Time</BTh>\n          <BTh>Filename</BTh>\n          <BTh>Actions</BTh>\n        </BTr>\n      </BThead>\n      <BTbody>\n        <BTr\n          v-for=\"res in botStore.activeBot.backtestHistoryList.filter(\n            (r) =>\n              r.filename.toLowerCase().includes(filterTextDebounced.toLowerCase()) ||\n              r.strategy.toLowerCase().includes(filterTextDebounced.toLowerCase()),\n          )\"\n          :key=\"res.filename + res.strategy\"\n          role=\"button\"\n          @click=\"botStore.activeBot.getBacktestHistoryResult(res)\"\n        >\n          <BTd>{{ res.strategy }}</BTd>\n          <BTd>\n            <strong>{{ res.timeframe }}</strong>\n            <span v-if=\"res.backtest_start_ts && res.backtest_end_ts\" class=\"ms-1\">\n              {{ timestampToTimeRangeString(res.backtest_start_ts * 1000) }}-{{\n                timestampToTimeRangeString(res.backtest_end_ts * 1000)\n              }}</span\n            >\n          </BTd>\n          <BTd\n            ><small>{{ timestampms(res.backtest_start_time * 1000) }}</small></BTd\n          >\n          <BTd>\n            <small>{{ res.filename }}</small>\n          </BTd>\n          <BTd>\n            <div class=\"d-flex align-items-center\">\n              <InfoBox\n                v-if=\"botStore.activeBot.botApiVersion >= 2.32\"\n                :class=\"res.notes ? 'opacity-100' : 'opacity-0'\"\n                :hint=\"res.notes ?? ''\"\n              ></InfoBox>\n              <BButton\n                v-if=\"botStore.activeBot.botApiVersion >= 2.31\"\n                class=\"ms-1\"\n                size=\"sm\"\n                title=\"Load this Result.\"\n                :disabled=\"res.run_id in botStore.activeBot.backtestHistory\"\n                @click.stop=\"botStore.activeBot.getBacktestHistoryResult(res)\"\n              >\n                <i-mdi-arrow-right />\n              </BButton>\n              <BButton\n                v-if=\"botStore.activeBot.botApiVersion >= 2.31\"\n                class=\"ms-1\"\n                size=\"sm\"\n                title=\"Delete this Result.\"\n                :disabled=\"res.run_id in botStore.activeBot.backtestHistory\"\n                @click.stop=\"deleteBacktestResult(res)\"\n              >\n                <i-mdi-delete />\n              </BButton>\n            </div>\n          </BTd>\n        </BTr>\n      </BTbody>\n    </BTableSimple>\n  </div>\n  <MessageBox ref=\"msgBox\" />\n</template>\n\n<style lang=\"scss\" scoped>\n.table-rounded-corners {\n  box-shadow: 0 0 0 1px var(--bs-border-color);\n  overflow: hidden;\n  vertical-align: middle;\n}\n</style>\n","<script setup lang=\"ts\">\nimport type { BacktestResultInMemory, BacktestResultUpdate } from '@/types';\n\ndefineProps({\n  backtestHistory: {\n    required: true,\n    type: Object as () => Record<string, BacktestResultInMemory>,\n  },\n  selectedBacktestResultKey: { required: false, default: '', type: String },\n  canUseModify: { required: false, default: false, type: Boolean },\n});\nconst emit = defineEmits<{\n  selectionChange: [value: string];\n  removeResult: [value: string];\n  updateResult: [value: BacktestResultUpdate];\n}>();\n\nconst setBacktestResult = (key: string) => {\n  emit('selectionChange', key);\n};\n\nfunction confirmInput(run_id: string, result: BacktestResultInMemory) {\n  result.metadata.editing = !result.metadata.editing;\n  if (result.metadata.filename) {\n    emit('updateResult', {\n      run_id: run_id,\n      notes: result.metadata.notes ?? '',\n      filename: result.metadata.filename,\n      strategy: result.metadata.strategyName,\n    });\n  }\n}\n</script>\n\n<template>\n  <div class=\"container d-flex flex-column align-items-stretch\">\n    <h3>Available results:</h3>\n    <BListGroup class=\"ms-2\">\n      <BListGroupItem\n        v-for=\"[key, result] in Object.entries(backtestHistory)\"\n        :key=\"key\"\n        button\n        :active=\"key === selectedBacktestResultKey\"\n        class=\"d-flex justify-content-between align-items-center py-1 pe-1\"\n        @click=\"setBacktestResult(key)\"\n      >\n        <template v-if=\"!result.metadata.editing\">\n          <BacktestResultSelectEntry :backtest-result=\"result\" :can-use-modify=\"canUseModify\" />\n          <div class=\"d-flex\">\n            <BButton\n              v-if=\"canUseModify\"\n              class=\"flex-nowrap\"\n              size=\"sm\"\n              title=\"Modify result notes.\"\n              @click.stop=\"result.metadata.editing = !result.metadata.editing\"\n            >\n              <i-mdi-pencil />\n            </BButton>\n            <BButton\n              size=\"sm\"\n              class=\"flex-nowrap\"\n              title=\"Delete this Result from UI.\"\n              @click.stop=\"emit('removeResult', key)\"\n            >\n              <i-mdi-delete />\n            </BButton>\n          </div>\n        </template>\n        <template v-if=\"result.metadata.editing\">\n          <BFormTextarea v-model=\"result.metadata.notes\" placeholder=\"notes\" size=\"sm\">\n          </BFormTextarea>\n\n          <BButton size=\"sm\" title=\"Confirm\" @click.stop=\"confirmInput(key, result)\">\n            <i-mdi-check />\n          </BButton>\n        </template>\n      </BListGroupItem>\n    </BListGroup>\n  </div>\n</template>\n","<script setup lang=\"ts\">\nimport { useBtStore } from '@/stores/btStore';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nenum BtRunModes {\n  run = 'run',\n  results = 'results',\n  visualize = 'visualize',\n  visualizesummary = 'visualize-summary',\n  compareresults = 'compare-results',\n  historicresults = 'historicResults',\n}\n\nconst botStore = useBotStore();\nconst btStore = useBtStore();\n\nconst hasBacktestResult = computed(() =>\n  botStore.activeBot.backtestHistory\n    ? Object.keys(botStore.activeBot.backtestHistory).length !== 0\n    : false,\n);\nconst hasMultiBacktestResult = computed(() =>\n  botStore.activeBot.backtestHistory\n    ? Object.keys(botStore.activeBot.backtestHistory).length > 1\n    : false,\n);\n\nconst timeframe = computed((): string => {\n  try {\n    return botStore.activeBot.selectedBacktestResult.timeframe;\n  } catch (err) {\n    return '';\n  }\n});\n\nconst showLeftBar = ref(false);\n\nconst btFormMode = ref<BtRunModes>(BtRunModes.run);\nconst pollInterval = ref<number | null>(null);\n\nconst selectBacktestResult = () => {\n  // Set parameters for this result\n  btStore.strategy = botStore.activeBot.selectedBacktestResult.strategy_name;\n  botStore.activeBot.getStrategy(btStore.strategy);\n  btStore.selectedTimeframe = botStore.activeBot.selectedBacktestResult.timeframe;\n  btStore.selectedDetailTimeframe =\n    botStore.activeBot.selectedBacktestResult.timeframe_detail || '';\n  // TODO: maybe this should not use timerange, but the actual backtest start/end results instead?\n  btStore.timerange = botStore.activeBot.selectedBacktestResult.timerange;\n};\n\nwatch(\n  () => botStore.activeBot.selectedBacktestResultKey,\n  () => {\n    selectBacktestResult();\n  },\n);\n\nonMounted(() => botStore.activeBot.getState());\nwatch(\n  () => botStore.activeBot.backtestRunning,\n  () => {\n    if (botStore.activeBot.backtestRunning === true) {\n      pollInterval.value = window.setInterval(botStore.activeBot.pollBacktest, 1000);\n    } else if (pollInterval.value) {\n      clearInterval(pollInterval.value);\n      pollInterval.value = null;\n    }\n  },\n);\n</script>\n\n<template>\n  <div class=\"d-flex flex-column pt-1 me-1\" style=\"height: calc(100vh - 60px)\">\n    <div>\n      <div class=\"d-flex flex-row\">\n        <h2 class=\"ms-5\">Backtesting</h2>\n        <p v-if=\"!botStore.activeBot.canRunBacktest\">\n          Bot must be in webserver mode to enable Backtesting.\n        </p>\n        <div class=\"w-100\">\n          <div\n            class=\"mx-md-5 d-flex flex-wrap justify-content-md-center justify-content-between mb-4 gap-2\"\n          >\n            <BFormRadio\n              v-if=\"botStore.activeBot.botApiVersion >= 2.15\"\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"historicResults\"\n              :disabled=\"!botStore.activeBot.canRunBacktest\"\n              ><i-mdi-cloud-download class=\"me-2\" />Load Results</BFormRadio\n            >\n            <BFormRadio\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"run\"\n              :disabled=\"!botStore.activeBot.canRunBacktest\"\n              ><i-mdi-run-fast class=\"me-2\" />Run backtest</BFormRadio\n            >\n            <BFormRadio\n              id=\"bt-analyze-btn\"\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"results\"\n              :disabled=\"!hasBacktestResult\"\n              ><i-mdi-table-eye class=\"me-2\" />Analyze result</BFormRadio\n            >\n            <BFormRadio\n              v-if=\"hasMultiBacktestResult\"\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"compare-results\"\n              :disabled=\"!hasMultiBacktestResult\"\n              ><i-mdi-compare-horizontal class=\"me-2\" />Compare results</BFormRadio\n            >\n            <BFormRadio\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"visualize-summary\"\n              :disabled=\"!hasBacktestResult\"\n              ><i-mdi-chart-bell-curve-cumulative class=\"me-2\" />Visualize summary</BFormRadio\n            >\n            <BFormRadio\n              v-model=\"btFormMode\"\n              name=\"bt-form-radios\"\n              button\n              class=\"mx-1 flex-samesize-items\"\n              value=\"visualize\"\n              :disabled=\"!hasBacktestResult\"\n              ><i-mdi-chart-timeline-variant-shimmer class=\"me-2\" />Visualize result</BFormRadio\n            >\n          </div>\n          <small v-show=\"botStore.activeBot.backtestRunning\" class=\"text-end bt-running-label\"\n            >Backtest running: {{ botStore.activeBot.backtestStep }}\n            {{ formatPercent(botStore.activeBot.backtestProgress, 2) }}</small\n          >\n        </div>\n      </div>\n    </div>\n    <div class=\"d-flex flex-md-row h-100\">\n      <!-- Left bar -->\n      <div\n        v-if=\"btFormMode !== 'visualize'\"\n        :class=\"`${showLeftBar ? 'col-md-3' : ''}`\"\n        class=\"sticky-top sticky-offset me-3 d-flex flex-column absolute\"\n        style=\"max-height: calc(100vh - 60px)\"\n      >\n        <BButton\n          class=\"align-self-start\"\n          aria-label=\"Close\"\n          size=\"sm\"\n          variant=\"outline-secondary\"\n          @click=\"showLeftBar = !showLeftBar\"\n        >\n          <i-mdi-chevron-right v-if=\"!showLeftBar\" width=\"24\" height=\"24\" />\n          <i-mdi-chevron-left v-if=\"showLeftBar\" width=\"24\" height=\"24\" />\n        </BButton>\n        <Transition name=\"fade\">\n          <BacktestResultSelect\n            v-if=\"showLeftBar\"\n            :backtest-history=\"botStore.activeBot.backtestHistory\"\n            :selected-backtest-result-key=\"botStore.activeBot.selectedBacktestResultKey\"\n            :can-use-modify=\"botStore.activeBot.botApiVersion >= 2.32\"\n            @selection-change=\"botStore.activeBot.setBacktestResultKey\"\n            @remove-result=\"botStore.activeBot.removeBacktestResultFromMemory\"\n            @update-result=\"botStore.activeBot.saveBacktestResultMetadata\"\n          />\n        </Transition>\n      </div>\n      <!-- End Left bar -->\n      <div class=\"d-flex flex-column flex-fill mw-100 h-100\">\n        <div class=\"d-md-flex h-100\">\n          <div\n            v-if=\"btFormMode === 'historicResults'\"\n            class=\"flex-fill d-flex flex-column bt-config\"\n          >\n            <BacktestHistoryLoad />\n          </div>\n          <div v-if=\"btFormMode === 'run'\" class=\"flex-fill d-flex flex-column bt-config\">\n            <BacktestRun />\n          </div>\n          <BacktestResultAnalysis\n            v-if=\"hasBacktestResult && btFormMode === 'results'\"\n            :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\n            class=\"flex-fill\"\n          />\n\n          <BacktestResultComparison\n            v-if=\"hasBacktestResult && btFormMode === 'compare-results'\"\n            :backtest-results=\"botStore.activeBot.backtestHistory\"\n            class=\"flex-fill\"\n          />\n\n          <BacktestGraphs\n            v-if=\"hasBacktestResult && btFormMode === 'visualize-summary'\"\n            :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n            class=\"flex-fill\"\n          />\n        </div>\n\n        <div v-if=\"hasBacktestResult && btFormMode === 'visualize'\" class=\"text-center w-100 mt-2\">\n          <BacktestResultChart\n            :timeframe=\"timeframe\"\n            :strategy=\"btStore.strategy\"\n            :timerange=\"btStore.timerange\"\n            :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\n            :freqai-model=\"btStore.freqAI.enabled ? btStore.freqAI.model : undefined\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.bt-running-label {\n  position: absolute;\n  right: 2em;\n  margin-top: 1em;\n}\n\n.sticky-offset {\n  top: 2em;\n}\n.flex-samesize-items {\n  flex: 1 1 0;\n  @media md {\n    flex: unset;\n  }\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.2s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.bt-config {\n  @media (min-width: 992px) {\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 75vw;\n  }\n}\n</style>\n"],"names":["props","__props","emit","__emit","botStore","useBotStore","selectedTrade","ref","sortDescendingOrder","sortMethod","sortMethodOptions","onTradeSelect","trade","sortedTrades","computed","field","a","b","ordersVisible","watch","isBarVisible","sliderPosition","navigateChartToTrade","CHART_MARKET_CHANGE","use","LineChart","CalendarComponent","CanvasRenderer","GridComponent","DatasetComponent","DataZoomComponent","LegendComponent","TitleComponent","TooltipComponent","VisualMapComponent","settingsStore","useSettingsStore","marketChangeChart","marketChangeOptions","colDate","el","colRelMean","echartsGridDefault","dataZoomPartial","marketChangeData","useAsyncState","getSortedTrades","trades","getBestPair","value","formatPercent","getWorstPair","useFormatPriceStake","stake_currency_decimals","stake_currency","price","formatPrice","generateBacktestMetricRows","result","bestPair","worstPair","pairSummary","formatPriceStake","shortMetrics","isNotUndefined","humanizeDurationFromSeconds","timestampms","capitalizeFirstLetter","str","formatTradingMode","generateBacktestSettingRows","tradingMode","formatObjectForTable","originalobj","valueKey","acc","key","item","metric","val","existingItem","i","backtestResultStats","values","tmp","backtestResultFields","res","periodicBreakdownSelections","periodicBreakdownPeriod","periodicBreakdownFields","tableItems","v","perTagReason","firstFields","_","backtestResultSettings","backtestsettingFields","locFreqaiModel","_useModel","onMounted","useBtStore","defineStore","state","btStore","clickBacktest","btPayload","openTradesInt","stakeAmountLoc","startingCapitalLoc","msgBox","filterText","filterTextDebounced","refDebounced","deleteBacktestResult","msg","_a","setBacktestResult","confirmInput","run_id","hasBacktestResult","hasMultiBacktestResult","timeframe","showLeftBar","btFormMode","pollInterval","selectBacktestResult"],"mappings":"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"}